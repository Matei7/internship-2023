/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/checkout.js":
/*!****************************!*\
  !*** ./src/js/checkout.js ***!
  \****************************/
/***/ (() => {

eval("let checkoutWindow = document.querySelector(\".checkout-window__grid\");\r\nlet totalText = document.querySelector(\".checkout-window-total\");\r\nconst ID_CART = \"64c77ddd8e88f\";\r\nlet changedQuantityForProduct = 0;\r\nconst cartLocalStorage = \"cartStorage\";\r\nlet mapForDebounce={};//id:quantity\r\n\r\n\r\nfunction getProductsCartFromLocalStorage() {\r\n    const cachedProducts = localStorage.getItem(cartLocalStorage);\r\n    if (cachedProducts) {\r\n        return JSON.parse(cachedProducts);\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction saveProductsCartInLocalStorage(products) {\r\n    let cartFromStorage = getProductsCartFromLocalStorage();\r\n    if (getProductsCartFromLocalStorage() != null) {\r\n        localStorage.setItem(cartLocalStorage, JSON.stringify(products));\r\n    } else {\r\n        localStorage.setItem(cartLocalStorage, JSON.stringify(products));\r\n    }\r\n\r\n}\r\n\r\nfunction fetchCart() {\r\n    return fetch(`https://vlad-matei.thrive-dev.bitstoneint.com/wp-json/internship-api/v1/cart/${ID_CART}`, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        }\r\n    })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(`Request failed with status ${response.status}`);\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(data => {\r\n            return data.products;\r\n        })\r\n        .catch(error => {\r\n            console.error('Error fetching cart products:', error);\r\n            return [];\r\n        });\r\n}\r\n\r\nfunction createItemBoxCheckout(product) {\r\n    let boxItem = document.createElement(\"div\");\r\n    boxItem.classList.add(\"checkout-window__grid__box-item\");\r\n    boxItem.setAttribute(\"data-id\", product.id);\r\n    const price = (product.price - (product.price * product.discountPercentage) / 100).toFixed(2);\r\n    let hmtlPart = `\r\n        <img src=${product.thumbnail} alt=\"Product Image\" class=\"box-item__image\">\r\n        <p class=\"box-item__title\">${product.title}</p>\r\n        <p class=\"box-item__price\">${price}</p>\r\n        <div class=\"quantity buttons_added\">\r\n          <input type=\"button\" value=\"-\" class=\"minus\">\r\n          <input type=\"number\" step=\"1\" min=\"1\" max=\"\" value=${product.quantity}  class=\"input-text qty text\" size=\"4\" >\r\n          <input type=\"button\" value=\"+\" class=\"plus\">\r\n        </div>\r\n        <p class=\"box-item__total-price\"> ${(product.quantity * price).toFixed(2)}</p>\r\n      </div>`;\r\n    boxItem.innerHTML = hmtlPart;\r\n    return boxItem;\r\n}\r\n\r\nfunction debounce(func, timeout = 3000) {\r\n    let timer;\r\n    return (...args) => {\r\n        clearTimeout(timer);\r\n        timer = setTimeout(() => {\r\n            func.apply(this, args);\r\n        }, timeout);\r\n    };\r\n}\r\n\r\nfunction plusMinusBtnListener(card) {\r\n    const plusBtn = card.querySelector(\".plus\");\r\n    const minusBtn = card.querySelector(\".minus\");\r\n    const quantity = card.querySelector(\".input-text.qty.text\");\r\n\r\n    plusBtn.addEventListener(\"click\", () => {\r\n        addToMapForDebounce(card.dataset.id, \"increase\");\r\n        debouncedChanges();\r\n    });\r\n\r\n    minusBtn.addEventListener(\"click\", () => {\r\n        addToMapForDebounce(card.dataset.id, \"decrease\");\r\n        debouncedChanges();\r\n    });\r\n}\r\nconst debouncedChanges = debounce(async () => {\r\n    try {\r\n        const productsToUpdate = [];\r\n        const productsCartLocal=getProductsCartFromLocalStorage();\r\n        for (const productId in mapForDebounce) {\r\n            const operations = mapForDebounce[productId];\r\n            const quantity = operations.reduce((acc, op) => {\r\n                return acc + (op === \"increase\" ? 1 : -1);\r\n            }, 0);\r\n            const currentProduct= productsCartLocal.find(product => product.id === Number(productId));\r\n            if(currentProduct.quantity+quantity<=0){\r\n                await decreaseQuantityRequest(productId);\r\n            }\r\n            else {\r\n                productsToUpdate.push({id: productId, quantity});\r\n            }\r\n        }\r\n        await increaseQuantityRequest(productsToUpdate);\r\n        clearMapForDebounce();\r\n        updateQuantityProducts();\r\n    } catch (error) {\r\n        console.error('Error updating product quantities:', error);\r\n    }\r\n});\r\n\r\nfunction addToMapForDebounce(productId, operation) {\r\n    if (!mapForDebounce[productId]) {\r\n        mapForDebounce[productId] = [];\r\n    }\r\n    mapForDebounce[productId].push(operation);\r\n}\r\nfunction clearMapForDebounce() {\r\n    for (const productId in mapForDebounce) {\r\n        delete mapForDebounce[productId];\r\n    }\r\n}\r\n\r\nasync function increaseQuantityRequest(productsToUpdate) {\r\n    await fetch(`https://vlad-matei.thrive-dev.bitstoneint.com/wp-json/internship-api/v1/cart/${ID_CART}`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n            products: productsToUpdate\r\n        })\r\n    }).then(response => {\r\n        if (!response.ok) {\r\n            throw new Error(`Request failed with status ${response.status}`);\r\n        }\r\n        return response.json();\r\n    })\r\n        .then(data => {\r\n            const products = data?.data.products;\r\n            saveProductsCartInLocalStorage(products);\r\n        });\r\n}\r\n\r\n\r\nasync function decreaseQuantityRequest(productId,quantity=1) {\r\n    const productsFromCart = getProductsCartFromLocalStorage();\r\n    const productToUpdate = productsFromCart.find(product => product.id === Number(productId));\r\n        try {\r\n            await fetch(`https://vlad-matei.thrive-dev.bitstoneint.com/wp-json/internship-api/v1/cart/${ID_CART}?products[]=${productId}`, {\r\n                method: 'DELETE',\r\n                headers: {'Content-Type': 'application/json'},\r\n            }).then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(`Request failed with status ${response.status}`);\r\n                }\r\n                return response.json();\r\n            })\r\n                .then(data => {\r\n                    const products = data?.data.products;\r\n                    saveProductsCartInLocalStorage(products);\r\n                });\r\n            checkoutWindow.removeChild(document.querySelector(`.checkout-window__grid__box-item[data-id=\"${productId}\"]`));\r\n            updateQuantityProducts();\r\n\r\n        } catch (error) {\r\n            console.error('Error deleting product:', error);\r\n        }\r\n}\r\n\r\nasync function updateQuantityProducts() {\r\n    try {\r\n            const productsFromCart=getProductsCartFromLocalStorage();\r\n            const total = productsFromCart.reduce((acc, product) => {\r\n            const price = product.price - (product.price * product.discountPercentage) / 100;\r\n            const totalPrice = product.quantity * price;\r\n            return acc + totalPrice;\r\n        }, 0);\r\n        productsFromCart.forEach(product => {\r\n            const itemBox = document.querySelector(`.checkout-window__grid__box-item[data-id=\"${product.id}\"]`);\r\n            const itemQuantity = itemBox.querySelector(\".input-text.qty.text\");\r\n            const itemTotalPrice = itemBox.querySelector(\".box-item__total-price\");\r\n            itemQuantity.value = product.quantity;\r\n            const price = product.price - (product.price * product.discountPercentage) / 100;\r\n            itemTotalPrice.textContent = `${(product.quantity * price).toFixed(2)}`\r\n        });\r\n        totalText.innerText = total.toFixed(2);\r\n    } catch (error) {\r\n        console.error('Error updating quantity products:', error);\r\n    }\r\n}\r\n\r\nfunction prepareCheckoutUI(productsFromCartStorage){\r\n    for (const product of productsFromCartStorage) {\r\n        let card = createItemBoxCheckout(product);\r\n        checkoutWindow.appendChild(card);\r\n        plusMinusBtnListener(card);\r\n    }\r\n    const total = productsFromCartStorage.reduce((acc, product) => {\r\n        const price = product.price - (product.price * product.discountPercentage) / 100;\r\n        return acc + product.quantity * price;\r\n    }, 0);\r\n    totalText.textContent = total.toFixed(2);\r\n}\r\n\r\nfunction showCheckoutProducts() {\r\n        const productsFromCartStorage = getProductsCartFromLocalStorage();\r\n        if (productsFromCartStorage) {\r\n            prepareCheckoutUI(productsFromCartStorage);\r\n        } else {\r\n            fetchCart()\r\n                .then(productsFromCart => {\r\n                    prepareCheckoutUI(productsFromCart);\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error show cart items:', error);\r\n                });\r\n        }\r\n\r\n}\r\n\r\nfunction generalListenerOnPage() {\r\n    const buyButton = document.querySelector(\".checkout-window__button\");\r\n    buyButton.addEventListener(\"click\", async () => {\r\n        const cart = document.querySelector(\".checkout-section\");\r\n        setTimeout(\r\n            function () {\r\n                cart.style.display = \"none\";\r\n            }, 3000);\r\n            alert(\"Thank you for your order! Have a nice day!\");\r\n            localStorage.clear();\r\n            await fetch(`https://vlad-matei.thrive-dev.bitstoneint.com/wp-json/internship-api/v1/cart/${ID_CART}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            })\r\n            localStorage.removeItem(cartLocalStorage);\r\n            setTimeout(window.location.href = \"index.html\", 3000);\r\n\r\n        }\r\n    );\r\n    const titleShop = document.getElementById(\"meta-shop\");\r\n    titleShop.addEventListener(\"click\", () => {\r\n        window.location.href = \"index.html\";\r\n    });\r\n}\r\n\r\nfunction initCheckout() {\r\n    showCheckoutProducts();\r\n    generalListenerOnPage();\r\n}\r\n\r\ninitCheckout();\r\n\r\n\n\n//# sourceURL=webpack://internship-2023/./src/js/checkout.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/checkout.js"]();
/******/ 	
/******/ })()
;